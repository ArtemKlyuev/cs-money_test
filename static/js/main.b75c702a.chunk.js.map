{"version":3,"sources":["utils/formatTime.js","utils/generateColor.js","components/DataTable/DataTable.js","components/DiagramFactory/Diagrams/BarDiagram.js","components/DiagramFactory/Diagrams/RoundDiagram.js","components/DiagramFactory/DiagramFactory.js","App.js","serviceWorker.js","index.js","components/DataTable/DataTable.module.css","App.module.css"],"names":["formatDigit","number","type","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","generateColor","h","s","v","rgb","i","Math","floor","f","p","q","t","round","hsvToRgb","DataList","props","useState","data","setData","increase","sortDirection","setSortDirection","whichHeaderClicked","setWhichHeaderClicked","fetchedData","associations","online","offline","id","Имя","Статус","Рейтинг","useEffect","newData","dataProperty","sort","a","sortData","bodyData","map","elem","name","avatar","status","average_rating","tickets_count","average_response_time","key","time","hrs","mins","secs","toFixed","trim","formatTime","headers","header","onClick","e","handleHeaderClick","className","classes","table","tableHead","body","BarDiagram","barCollors","setBarCollors","title","colors","filtredData","element","color","random","push","Number","style","textAlign","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","RoundDiagram","cellColors","setCellColors","value","coloredCells","index","isAnimationActive","cy","outerRadius","label","DiagramFactory","App","axios","get","then","res","response","catch","err","console","error","container","DataTable","diagrams","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b75c702a.chunk.js","sourcesContent":["const formatDigit = (number, type) => {\n    switch (type) {\n        case 'часы':\n            if (number > 0) {\n                return `${number} ч`;\n            }\n            return '';\n        case 'минуты':\n            if (number > 0) {\n                return `${number} мин`;\n            }\n            return '';\n        case 'секунды':\n            return `${number} сек`;\n        default:\n            return number;\n    }\n};\n\nexport const formatTime = (time) => {\n    let result = '';\n\n    const hrs = Math.floor(time / 3600);\n    const mins = Math.floor((time % 3600) / 60);\n    const secs = +(time % 60).toFixed(1);\n\n    result = `${formatDigit(hrs, 'часы')} ${formatDigit(\n        mins,\n        'минуты'\n    )} ${formatDigit(secs, 'секунды')}`.trim();\n\n    return result;\n};\n","const hsvToRgb = (h, s, v) => {\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n\n    let r = null;\n    let g = null;\n    let b = null;\n    switch (i % 6) {\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = p;\n            b = q;\n            break;\n        default:\n            return;\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\nconst componentToHex = (c) => {\n    const hex = c.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n};\n\nconst rgbToHex = (r, g, b) => {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nexport const generateColor = (h, s, v) => {\n    const rgb = hsvToRgb(h, s, v);\n    const hex = rgbToHex(...rgb);\n    return hex;\n};\n","import React, { useState, useEffect } from 'react';\nimport { formatTime } from '../../utils';\nimport classes from './DataTable.module.css';\n\nconst DataList = (props) => {\n    const [data, setData] = useState([]);\n    const [sortDirection, setSortDirection] = useState({\n        increase: null\n    });\n    const [whichHeaderClicked, setWhichHeaderClicked] = useState('');\n\n    const { fetchedData } = props;\n\n    const associations = {\n        online: true,\n        offline: false,\n        id: 'id',\n        Имя: 'name',\n        Статус: 'status',\n        Рейтинг: 'average_rating',\n        'Количество обращений': 'tickets_count',\n        'Среднее время ответа': 'average_response_time'\n    };\n\n    const sortData = () => {\n        let newData = null;\n        let dataProperty = associations[whichHeaderClicked];\n\n        if (sortDirection.increase) {\n            newData = [...data];\n\n            newData.sort((a, b) => {\n                if (dataProperty === 'status') {\n                    return (\n                        associations[a[dataProperty]] -\n                        associations[b[dataProperty]]\n                    );\n                }\n                return a[dataProperty] - b[dataProperty];\n            });\n\n            setData(newData);\n        } else {\n            newData = [...data];\n\n            newData.sort((a, b) => {\n                if (dataProperty === 'status') {\n                    return (\n                        associations[b[dataProperty]] -\n                        associations[a[dataProperty]]\n                    );\n                }\n                return b[dataProperty] - a[dataProperty];\n            });\n\n            setData(newData);\n        }\n    };\n\n    useEffect(() => {\n        sortData();\n    }, [sortDirection]);\n\n    useEffect(() => {\n        if (data.length === 0) {\n            setData(fetchedData);\n        }\n    }, [fetchedData, data]);\n\n    const handleHeaderClick = (e, header) => {\n        const { increase } = sortDirection;\n\n        if (increase === null) {\n            setSortDirection({ increase: true });\n            setWhichHeaderClicked(header);\n            return;\n        }\n        setSortDirection({ increase: !increase });\n        setWhichHeaderClicked(header);\n    };\n\n    const bodyData = data.map((elem) => {\n        const {\n            id,\n            name,\n            avatar,\n            status,\n            average_rating,\n            tickets_count,\n            average_response_time\n        } = elem;\n\n        return (\n            <tr key={id}>\n                <td>{id}</td>\n                <td>{name}</td>\n                <td>{avatar}</td>\n                <td>{status}</td>\n                <td>{tickets_count}</td>\n                <td>{average_rating}</td>\n                <td>{formatTime(average_response_time)}</td>\n            </tr>\n        );\n    });\n\n    let headers = [\n        'id',\n        'Имя',\n        'Аватар',\n        'Статус',\n        'Количество обращений',\n        'Рейтинг',\n        'Среднее время ответа'\n    ];\n\n    headers = headers.map((header) => {\n        if (header === 'Статус' || header === 'Среднее время ответа') {\n            return (\n                <th key={header} onClick={(e) => handleHeaderClick(e, header)}>\n                    {header}\n                </th>\n            );\n        }\n\n        return <th key={header}>{header}</th>;\n    });\n\n    return (\n        <table className={classes.table}>\n            <thead className={classes.tableHead}>\n                <tr>{headers}</tr>\n            </thead>\n            <tbody className={classes.body}>{bodyData}</tbody>\n        </table>\n    );\n};\n\nexport default DataList;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    ResponsiveContainer\n} from 'recharts';\nimport { generateColor } from '../../../utils';\n\nconst BarDiagram = (props) => {\n    const [barCollors, setBarCollors] = useState([]);\n    const { data, title } = props;\n    const colors = [];\n\n    const filtredData = data.map((element) => {\n        const color = generateColor(Math.random(), 0.3, 0.8);\n        colors.push(color);\n\n        const { name, average_rating } = element;\n        return { name, average_rating: Number(average_rating) };\n    });\n\n    useEffect(() => {\n        if (barCollors.length !== data.length) {\n            setBarCollors([...barCollors, ...colors]);\n        }\n    }, [colors]);\n\n    return (\n        <Fragment>\n            <p style={{ textAlign: 'center' }}>{title}</p>\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart\n                    width={1200}\n                    height={300}\n                    data={filtredData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar\n                        dataKey=\"average_rating\"\n                        fill={generateColor(Math.random(), 0.3, 0.8)}\n                    />\n                </BarChart>\n            </ResponsiveContainer>\n        </Fragment>\n    );\n};\n\nexport { BarDiagram };\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\nimport { generateColor } from '../../../utils';\n\nconst RoundDiagram = (props) => {\n    const [cellColors, setCellColors] = useState([]);\n    const { data, title } = props;\n    const colors = [];\n\n    const filtredData = data.map((element) => {\n        const color = generateColor(Math.random(), 0.3, 0.8);\n        colors.push(color);\n        const { name, tickets_count } = element;\n        return { name, value: tickets_count };\n    });\n\n    useEffect(() => {\n        if (cellColors.length !== data.length) {\n            setCellColors([...cellColors, ...colors]);\n        }\n    }, [data]);\n\n    const coloredCells = filtredData.map((data, index) => (\n        <Cell fill={cellColors[index]} key={data.name} />\n    ));\n\n    return (\n        <Fragment>\n            <p style={{ textAlign: 'center' }}>{title}</p>\n            <ResponsiveContainer width=\"100%\" height={500}>\n                <PieChart>\n                    <Pie\n                        isAnimationActive={true}\n                        data={filtredData}\n                        cy={200}\n                        outerRadius={120}\n                        fill=\"#8884d8\"\n                        label\n                    >\n                        {coloredCells}\n                    </Pie>\n                    <Tooltip />\n                </PieChart>\n            </ResponsiveContainer>\n        </Fragment>\n    );\n};\n\nexport { RoundDiagram };\n","import React from 'react';\nimport { BarDiagram, RoundDiagram } from './Diagrams';\n\nconst DiagramFactory = (props) => {\n    const { data, type, title } = props;\n\n    switch (type) {\n        case 'round':\n            return <RoundDiagram data={data} title={title} />;\n        case 'bar':\n            return <BarDiagram data={data} title={title} />;\n        default:\n            return <div>Невозможно отобразить диаграмму</div>;\n    }\n};\n\nexport default DiagramFactory;\n","import React, { useState, useEffect } from 'react';\nimport DataTable from './components/DataTable/DataTable';\nimport DiagramFactory from './components/DiagramFactory/DiagramFactory';\nimport axios from 'axios';\nimport classes from './App.module.css';\nconst App = () => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        if (data.length === 0) {\n            axios\n                .get('data/data.json')\n                .then((res) => {\n                    const response = res.data.data;\n                    setData(response);\n                })\n                .catch((err) => console.error(err));\n        }\n    });\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.table}>\n                <DataTable fetchedData={data} />\n            </div>\n\n            <div className={classes.diagrams}>\n                <DiagramFactory\n                    data={data}\n                    type={'round'}\n                    title={'Данные по количеству обращений'}\n                />\n                <DiagramFactory\n                    data={data}\n                    type={'bar'}\n                    title={'Данные по рейтингу'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"DataTable_table__33qbl\",\"tableHead\":\"DataTable_tableHead__3tMag\",\"body\":\"DataTable_body__3uXnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"table\":\"App_table__2Wm0g\",\"diagrams\":\"App_diagrams__3tff4\"};"],"sourceRoot":""}